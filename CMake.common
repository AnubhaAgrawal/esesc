
SET(CMAKE_HOST_MARCH "native")

IF(CMAKE_C_COMPILER MATCHES "emcc")
  SET (CMAKE_C_FLAGS                     "-Wno-warn-absolute-paths -Wall -std=c99")
  SET (CMAKE_C_FLAGS_MINSIZEREL          "-O2 -s ASM_JS=1 -DNDEBUG")
  SET (CMAKE_C_FLAGS_RELEASE             "-O2 -s ASM_JS=1 -DNDEBUG")
  SET (CMAKE_C_FLAGS_RELWITHDEBINFO      "-O2 -s ASM_JS=1 -g")

  SET (CMAKE_CXX_FLAGS                     "-Wno-warn-absolute-paths -Wall")
  SET (CMAKE_CXX_FLAGS_MINSIZEREL          "-O2 -s ASM_JS=1 -DNDEBUG")
  SET (CMAKE_CXX_FLAGS_RELEASE             "-O2 -s ASM_JS=1 -DNDEBUG")
  SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO      "-O2 -s ASM_JS=1 -g")

  SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG=1")
  SET(CMAKE_C_FLAGS_DEBUG   "-g -O0 -DDEBUG=1")
ELSE(CMAKE_C_COMPILER MATCHES "emcc")
  IF(CMAKE_C_COMPILER MATCHES "clang")
    SET (CMAKE_C_FLAGS                     "-Wall -std=c99")
    SET (CMAKE_C_FLAGS_MINSIZEREL          "-Os -DNDEBUG")
    SET (CMAKE_C_FLAGS_RELEASE             "-O3 -DNDEBUG")
    SET (CMAKE_C_FLAGS_RELWITHDEBINFO      "-O2 -g")

    SET (CMAKE_CXX_FLAGS                     "-Wall")
    SET (CMAKE_CXX_FLAGS_MINSIZEREL          "-Os -DNDEBUG")
    SET (CMAKE_CXX_FLAGS_RELEASE             "-flto -O3 -DNDEBUG")
    SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO      "-O2 -g")

    SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG=1")
    SET(CMAKE_C_FLAGS_DEBUG   "-g -O0 -DDEBUG=1")
  ELSE(CMAKE_C_COMPILER MATCHES "clang")
    # Uncomment this two lines to activate line coverage
    #SET(CMAKE_CXX_FLAGS_RELEASE "-g -ftest-coverage -fprofile-arcs")
    #SET(CMAKE_C_FLAGS_RELEASE "-g -ftest-coverage -fprofile-arcs")

    SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
    SET(CMAKE_C_FLAGS_RELEASE   "-O2 -DNDEBUG")

    SET(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG=1")
    SET(CMAKE_C_FLAGS_DEBUG   "-g -O0 -DDEBUG=1")
  ENDIF(CMAKE_C_COMPILER MATCHES "clang")
ENDIF(CMAKE_C_COMPILER MATCHES "emcc")

IF(NOT USING_NOTIFIED)
  MESSAGE(STATUS "Using ${CMAKE_C_COMPILER}")
  SET(USING_NOTIFIED 1)
ENDIF(NOT USING_NOTIFIED)

IF(CMAKE_BUILD_TYPE MATCHES "Debug") 
  SET(CMAKE_BUILD_TYPE "Debug")
ELSE(CMAKE_BUILD_TYPE MATCHES "Debug")
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")

SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -fPIC")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC")
SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -fPIC")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC")

###################################
IF(ENABLE_NBSD)
  MESSAGE("Enabling NON BSD copyrighted files")
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_NBSD")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_NBSD")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_NBSD")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_NBSD")
ENDIF(ENABLE_NBSD)

###################################
#IF(ENABLE_PEQ)
#  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_PEQ=1")
#  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_PEQ=1")
# SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_PEQ=1")
# SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_PEQ=1")
#ENDIF(ENABLE_PEQ)

###################################
IF(ENABLE_LIVE)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DESESC_LIVE=1")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DESESC_LIVE=1")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DESESC_LIVE=1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DESESC_LIVE=1")
ENDIF(ENABLE_LIVE)

###################################
IF(NEW_BOOST)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DNEW_BOOST")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DNEW_BOOST")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DNEW_BOOST")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNEW_BOOST")
ENDIF(NEW_BOOST)

###################################
SET(qemu_BUILD "${CMAKE_CURRENT_BINARY_DIR}/../qemu")
SET(qemu_SOURCE "${esesc_SOURCE_DIR}/emul/qemu")

IF(CMAKE_ESESC_QEMU_ISA MATCHES "armv7") 
  SET(CMAKE_QEMU_LIBS 
      -Wl,-T,${qemu_BUILD}/config-host.ld
      -Wl,-T,${qemu_SOURCE}/x86_64.ld
      ${qemu_BUILD}/arm-linux-user/libqemu_esesc.a)
ELSE(CMAKE_ESESC_QEMU_ISA MATCHES "armv7") 
  SET(CMAKE_QEMU_OBJS -Wl,--warn-common -Wl,-z,relro -Wl,-z,now -pie 
    ${qemu_BUILD}/mips64el-linux-user/exec.o ${qemu_BUILD}/mips64el-linux-user/translate-all.o ${qemu_BUILD}/mips64el-linux-user/cpu-exec.o ${qemu_BUILD}/mips64el-linux-user/tcg/tcg.o ${qemu_BUILD}/mips64el-linux-user/fpu/softfloat.o ${qemu_BUILD}/mips64el-linux-user/disas.o ${qemu_BUILD}/mips64el-linux-user/kvm-stub.o ${qemu_BUILD}/mips64el-linux-user/gdbstub.o ${qemu_BUILD}/mips64el-linux-user/thunk.o ${qemu_BUILD}/mips64el-linux-user/user-exec.o ${qemu_BUILD}/mips64el-linux-user/linux-user/main.o ${qemu_BUILD}/mips64el-linux-user/linux-user/syscall.o ${qemu_BUILD}/mips64el-linux-user/linux-user/strace.o ${qemu_BUILD}/mips64el-linux-user/linux-user/mmap.o ${qemu_BUILD}/mips64el-linux-user/linux-user/signal.o ${qemu_BUILD}/mips64el-linux-user/linux-user/elfload.o ${qemu_BUILD}/mips64el-linux-user/linux-user/linuxload.o ${qemu_BUILD}/mips64el-linux-user/linux-user/uaccess.o ${qemu_BUILD}/mips64el-linux-user/linux-user/uname.o ${qemu_BUILD}/mips64el-linux-user/target-mips/translate.o ${qemu_BUILD}/mips64el-linux-user/target-mips/mips-semi.o ${qemu_BUILD}/mips64el-linux-user/tcg/optimize.o ${qemu_BUILD}/mips64el-linux-user/target-mips/dsp_helper.o ${qemu_BUILD}/mips64el-linux-user/target-mips/op_helper.o ${qemu_BUILD}/mips64el-linux-user/target-mips/lmi_helper.o ${qemu_BUILD}/mips64el-linux-user/target-mips/helper.o ${qemu_BUILD}/mips64el-linux-user/target-mips/cpu.o ${qemu_BUILD}/mips64el-linux-user/target-mips/gdbstub.o ${qemu_BUILD}/mips64el-linux-user/target-mips/msa_helper.o ${qemu_BUILD}/mips64el-linux-user/../qemu-log.o ${qemu_BUILD}/mips64el-linux-user/../tcg-runtime.o ${qemu_BUILD}/mips64el-linux-user/../disas/i386.o ${qemu_BUILD}/mips64el-linux-user/../disas/mips.o ${qemu_BUILD}/mips64el-linux-user/../hw/core/qdev.o ${qemu_BUILD}/mips64el-linux-user/../hw/core/qdev-properties.o ${qemu_BUILD}/mips64el-linux-user/../hw/core/fw-path-provider.o ${qemu_BUILD}/mips64el-linux-user/../hw/core/irq.o ${qemu_BUILD}/mips64el-linux-user/../hw/core/hotplug.o ${qemu_BUILD}/mips64el-linux-user/../hw/core/nmi.o ${qemu_BUILD}/mips64el-linux-user/../qom/object.o ${qemu_BUILD}/mips64el-linux-user/../qom/container.o ${qemu_BUILD}/mips64el-linux-user/../qom/qom-qobject.o ${qemu_BUILD}/mips64el-linux-user/../qom/cpu.o ${qemu_BUILD}/mips64el-linux-user/../qom/object_interfaces.o ${qemu_BUILD}/mips64el-linux-user/trace/generated-helpers.o
    ${qemu_BUILD}/libqemuutil.a
    ${qemu_BUILD}/libqemustub.a)
ENDIF(CMAKE_ESESC_QEMU_ISA MATCHES "armv7") 

SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CMAKE_THREAD_LIBS_INIT})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${ZLIB_LIBRARIES})
#SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CURSES_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} -lncurses)
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${GNUTLS_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${X11_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CURL_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${MLIB_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${RT_LIBRARIES})

# Just in case that you want the SDL (maybe for full-system??)
#SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${SDL_LIBRARIES})

SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${UTIL_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} -lglib-2.0)

IF(ENABLE_LIVE)
  SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} -lcryptopp)
ENDIF(ENABLE_LIVE)

